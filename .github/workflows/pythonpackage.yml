name: Build, Test, and Publish

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: "1.8.3"

      - name: Update package index and install dependencies
        run: |
          poetry install --with dev 
          poetry install -E google -E watson -E polly -E microsoft -E googletrans -E witai -E elevenlabs
          poetry run postinstall

      - name: Generate setup.py on Windows
        run: |
          $PACKAGE_VERSION = "${{ steps.set_version.outputs.version }}"
          $README_CONTENT = Get-Content README.md -Raw
          Add-Content setup.py "from setuptools import setup, find_packages"
          Add-Content setup.py "import os"
          Add-Content setup.py "version = os.getenv('PACKAGE_VERSION', '$PACKAGE_VERSION')"
          Add-Content setup.py "with open('README.md', 'r', encoding='utf-8') as fh:"
          Add-Content setup.py "    long_description = fh.read()"
          Add-Content setup.py "setup("
          Add-Content setup.py "    name='py3-tts-wrapper',"
          Add-Content setup.py "    version=version,"
          Add-Content setup.py "    packages=find_packages(),"
          Add-Content setup.py "    install_requires=["
          poetry export -f requirements.txt --without-hashes --all-extras | ForEach-Object { $_ -replace '"', '\"' } | ForEach-Object { Add-Content setup.py ("        `"$_`",") }
          Add-Content setup.py "    ],"
          Add-Content setup.py "    long_description=long_description,"
          Add-Content setup.py "    long_description_content_type='text/markdown',"
          Add-Content setup.py "    # Add any additional options necessary for building platform-specific wheels"
          Add-Content setup.py ")"
        env:
          PACKAGE_VERSION: ${{ steps.set_version.outputs.version }}


      # We used to build on all platforms. Just incase we need to do that..
      # - name: Generate setup.py on Unix-based systems
      #   if: matrix.os != 'windows-latest'
      #   run: |
      #     PACKAGE_VERSION=$(poetry version --short)
      #     echo "from setuptools import setup, find_packages" > setup.py
      #     echo "import os" >> setup.py
      #     echo "version = os.getenv('PACKAGE_VERSION', '$PACKAGE_VERSION')" >> setup.py
      #     echo "setup(" >> setup.py
      #     echo "    name='py3-tts-wrapper'," >> setup.py
      #     echo "    version=version," >> setup.py
      #     echo "    packages=find_packages()," >> setup.py
      #     echo "    install_requires=[" >> setup.py
      #     poetry export -f requirements.txt --without-hashes --all-extras | sed 's/"/\\"/g' | sed 's/^/        "/' | sed 's/$/",/' >> setup.py
      #     echo "    ]," >> setup.py
      #     echo "    # Add any additional options necessary for building platform-specific wheels" >> setup.py
      #     echo ")" >> setup.py
      #   env:
      #     PACKAGE_VERSION: ${{ steps.set_version.outputs.version }}

      - name: Build the wheel
        run: |
          pip install wheel setuptools
          python setup.py bdist_wheel

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  # Test both wheel and from poetry - on a range of platforms and versions
  test:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

              
      - name: Install system dependencies on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y portaudio19-dev libttspico-utils ffmpeg

      - name: Install system dependencies on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install portaudio ffmpeg

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: "1.8.3"

      - name: Update package index and install dependencies
        run: |
          poetry install --with dev 
          poetry install -E google -E watson -E polly -E microsoft -E googletrans -E witai -E elevenlabs
          poetry run postinstall

      - name: Set environment variables and create Google credentials file on Windows
        if: matrix.os == 'windows-latest'
        env:
          WATSON_API_KEY: ${{ secrets.WATSON_API_KEY }}
          WATSON_API_URL: ${{ secrets.WATSON_API_URL }}
          WATSON_REGION: ${{ secrets.WATSON_REGION }}
          WATSON_INSTANCE_ID: ${{ secrets.WATSON_INSTANCE_ID }}
          MICROSOFT_TOKEN: ${{ secrets.MICROSOFT_TOKEN }}
          MICROSOFT_REGION: ${{ secrets.MICROSOFT_REGION }}
          POLLY_REGION: ${{ secrets.POLLY_REGION }}
          POLLY_AWS_KEY_ID: ${{ secrets.POLLY_AWS_KEY_ID }}
          POLLY_AWS_ACCESS_KEY: ${{ secrets.POLLY_AWS_ACCESS_KEY }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
          WITAI_TOKEN: ${{ secrets.WITAI_TOKEN }}
          GOOGLE_SA_PATH: ${{ secrets.GOOGLE_SA_PATH }}
          GOOGLE_SA_FILE_B64: ${{ secrets.GOOGLE_SA_FILE_B64 }}
        run: |
          $google_sa_dir = [System.IO.Path]::GetDirectoryName($env:GOOGLE_SA_PATH)
          if (-not (Test-Path -Path $google_sa_dir)) {
            New-Item -ItemType Directory -Force -Path $google_sa_dir
          }
          [System.Convert]::FromBase64String($env:GOOGLE_SA_FILE_B64) | Set-Content -Path $env:GOOGLE_SA_PATH -AsByteStream
          # run all tests with coverage
          poetry run pytest --cov=tts_wrapper -m "not synthetic"

      - name: Set environment variables and create Google credentials file on Unix-based systems
        if: matrix.os != 'windows-latest'
        env:
          WATSON_API_KEY: ${{ secrets.WATSON_API_KEY }}
          WATSON_API_URL: ${{ secrets.WATSON_API_URL }}
          WATSON_REGION: ${{ secrets.WATSON_REGION }}
          WATSON_INSTANCE_ID: ${{ secrets.WATSON_INSTANCE_ID }}
          MICROSOFT_TOKEN: ${{ secrets.MICROSOFT_TOKEN }}
          MICROSOFT_REGION: ${{ secrets.MICROSOFT_REGION }}
          POLLY_REGION: ${{ secrets.POLLY_REGION }}
          POLLY_AWS_KEY_ID: ${{ secrets.POLLY_AWS_KEY_ID }}
          POLLY_AWS_ACCESS_KEY: ${{ secrets.POLLY_AWS_ACCESS_KEY }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
          WITAI_TOKEN: ${{ secrets.WITAI_TOKEN }}
          GOOGLE_SA_PATH: ${{ secrets.GOOGLE_SA_PATH }}
          GOOGLE_SA_FILE_B64: ${{ secrets.GOOGLE_SA_FILE_B64 }}
        run: |
          mkdir -p $(dirname "$GOOGLE_SA_PATH")
          echo "$GOOGLE_SA_FILE_B64" | base64 --decode > "$GOOGLE_SA_PATH"
          # run all tests with coverage
          poetry run pytest --cov=tts_wrapper -m "not synthetic"

      - name: Run all tests with Makefile
        env:
          WATSON_API_KEY: ${{ secrets.WATSON_API_KEY }}
          WATSON_API_URL: ${{ secrets.WATSON_API_URL }}
          WATSON_REGION: ${{ secrets.WATSON_REGION }}
          WATSON_INSTANCE_ID: ${{ secrets.WATSON_INSTANCE_ID }}
          MICROSOFT_TOKEN: ${{ secrets.MICROSOFT_TOKEN }}
          MICROSOFT_REGION: ${{ secrets.MICROSOFT_REGION }}
          POLLY_REGION: ${{ secrets.POLLY_REGION }}
          POLLY_AWS_KEY_ID: ${{ secrets.POLLY_AWS_KEY_ID }}
          POLLY_AWS_ACCESS_KEY: ${{ secrets.POLLY_AWS_ACCESS_KEY }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
          WITAI_TOKEN: ${{ secrets.WITAI_TOKEN }}
          GOOGLE_SA_PATH: ${{ secrets.GOOGLE_SA_PATH }}
          GOOGLE_SA_FILE_B64: ${{ secrets.GOOGLE_SA_FILE_B64 }}
        run: poetry run make tests
      
        # Building the wheel is failing. I dont know why
      # - name: Download build artifacts 
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: dist
      #     path: dist

      # - name: Debug environment variables
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     Write-Output "Environment variables:"
      #     Get-ChildItem env: | Sort-Object Name

      # - name: Debug environment variables
      #   if: matrix.os != 'windows-latest'
      #   run: |
      #     echo "Environment variables:"
      #     env

      # - name: Install wheel package on Windows
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     $wheel = Get-ChildItem -Path dist\*.whl | Select-Object -First 1
      #     Write-Output "Installing $($wheel.Name)"
      #     python -m pip install --upgrade pip
      #     pip install $wheel.FullName

      # - name: Install wheel package on Linux/Mac
      #   if: matrix.os != 'windows-latest'
      #   run: |
      #     WHEEL_FILE=$(ls dist/*.whl)
      #     echo "Installing $WHEEL_FILE"
      #     pip install "$WHEEL_FILE"  --verbose

      # - name: Basic tests with pytest
      #   run: |
      #     pip install pytest
      #     make tests

      # - name: Upload Coverage to Codecov
      #   if: ${{ !env.ACT }} && github.event_name == 'push'
      #   uses: codecov/codecov-action@v2


  publish:
    runs-on: ubuntu-latest
    needs: test
    # if: startsWith(github.ref, 'refs/tags/')
    steps:

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: List contents of dist after download
        run: ls -R dist

      # - name: Run synthetic tests on TTS services
      #   env:
      #     WATSON_API_KEY: ${{ secrets.WATSON_API_KEY }}
      #     WATSON_API_URL: ${{ secrets.WATSON_API_URL }}
      #     WATSON_REGION: ${{ secrets.WATSON_REGION }}
      #     WATSON_INSTANCE_ID: ${{ secrets.WATSON_INSTANCE_ID }}
      #     MICROSOFT_TOKEN: ${{ secrets.MICROSOFT_TOKEN }}
      #     MICROSOFT_REGION: ${{ secrets.MICROSOFT_REGION }}
      #     POLLY_REGION: ${{ secrets.POLLY_REGION }}
      #     POLLY_AWS_KEY_ID: ${{ secrets.POLLY_AWS_KEY_ID }}
      #     POLLY_AWS_ACCESS_KEY: ${{ secrets.POLLY_AWS_ACCESS_KEY }}
      #     ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
      #     WITAI_TOKEN: ${{ secrets.WITAI_TOKEN }}
      #     GOOGLE_SA_PATH: ${{ secrets.GOOGLE_SA_PATH }}
      #     GOOGLE_SA_FILE_B64: ${{ secrets.GOOGLE_SA_FILE_B64 }}
      #   run: |
      #     poetry install --with dev
      #     poetry install -E google -E watson -E polly -E microsoft -E googletrans -E witai -E elevenlabs
      #     poetry run postinstall
      #     poetry run pytest -m "synthetic"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}